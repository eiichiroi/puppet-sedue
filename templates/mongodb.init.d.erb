#!/bin/sh
# to support chkconfig on RedHat Enterprise Linux
# chkconfig: 345 97 3
# description: <%= server_type %> @ Sedue search engine.

SEDUE_HOME=<%= scope.lookupvar('::sedue_home') %>
INSTANCE_NAME=<%= instance %>

. $SEDUE_HOME/sedue-env.sh

# To avoid failing to get supervise's pid when executing get_supervise_pid,
# normalize path(replace continuation slashes with a slash and remove the trailing slash)
SEDUE_HOME=`echo $SEDUE_HOME | sed -e "s/\/\+/\//g" | sed -e "s/\/$//g"`

SERVNAME="<%= server_script_name %>"
SERVDIR="$SEDUE_HOME/etc/serve/$INSTANCE_NAME"
SUPERVISE="$SEDUE_HOME/bin/serve-supervise-$INSTANCE_NAME"
SERV="$SEDUE_HOME/bin/serve -s $SERVDIR"
SLEEP_INTERVAL=<%= server_sleep_interval %>
LOCKFILE="$SEDUE_HOME/repos/$INSTANCE_NAME/mongod.lock"

get_supervise_pid() {
    pid=-1
    for p in `pgrep -f $SUPERVISE`
    do
        # check opened fds with the serve directory name and server's name.
        if [ `ls -l /proc/$p/fd | grep $SERVDIR | grep $SERVNAME | wc -l` -gt 0 ]; then
          pid=$p
          break
        fi
    done
}

get_serv_pid() {
    $SERV $SERVNAME stat >/dev/null
    RETVAL=$?
    if [ $RETVAL -eq 0 ]; then
        pid=$($SERV $SERVNAME stat | awk -F '=' '{print $2}');
    else
        pid=-1
    fi
}

start() {
    get_supervise_pid
    if [ $pid -lt 0 ]; then
        # A control FIFO must be removed before starting supervise.
        # If no supervise process were found by get_supervise_pid,
        # there would be no reader for the control FIFO.
        if [ -p $SERVDIR/$SERVNAME/control ]; then
            rm $SERVDIR/$SERVNAME/control
            RETVAL=$?
            if [ $RETVAL -ne 0 ]; then
                echo "ERROR: Failed to remove control file. Please remove it manually: $SERVDIR/$SERVNAME/control"
                exit 1
            fi
        fi

        # -d for daemonize
        $SUPERVISE -x -d -c $SERVDIR/$SERVNAME/control -s $SERVDIR/$SERVNAME/stat -- $SERVDIR/$SERVNAME.run >/dev/null 2>&1
        RETVAL=$?
        if [ $RETVAL -ne 0 ]; then
            echo "ERROR: Failed to start supervise process"
            exit 1
        fi

        sleep $SLEEP_INTERVAL
        get_supervise_pid
        if [ $pid -lt 0 ]; then
            echo "ERROR: Failed to start supervise process"
            exit 1
        fi
    fi

    get_serv_pid
    if [ $pid -gt 0 ]; then
        echo "ERROR: $SERVNAME already running: pid=$pid"
        exit 1
    fi

    echo "Checking $LOCKFILE..."
    if [ -f $LOCKFILE ]; then
        echo "ERROR: $LOCKFILE exists. MongoDB halted in an unexpected way!"
        echo "The database file could be corrupted."
        echo "Check the database file, and erase mongod.lock file."
        echo "see: http://dochub.mongodb.org/core/repair for more information"
        exit 1
    fi

    echo "Starting <%= server_type %> <%= server_name %>..."

    $SERV $SERVNAME start
    RETVAL=$?
    if [ $RETVAL -ne 0 ]; then
        echo "ERROR: Failed to run serve command"
        exit 1
    fi
    echo "Waiting..."
    for i in `seq 0 10`; do
        get_serv_pid
        if [ $pid -eq 0 ]; then
            sleep $SLEEP_INTERVAL
        fi
    done
    get_serv_pid
    if [ $pid -eq 0 ]; then
        echo "ERROR: Failed to start $SERVNAME"
        exit 1
    fi
}

stop() {
    get_supervise_pid
    if [ $pid -lt 0 ]; then
      echo "$SERVNAME already stopped."
      return 1
    fi

    echo "Stopping <%= server_type %> <%= server_name %>..."
    get_serv_pid
    if [ $pid -gt 0 ]; then
        $SERV $SERVNAME kill
        RETVAL=$?
        if [ $RETVAL -ne 0 ]; then
            echo "ERROR: Failed to run serve command. serve-supervise already died?"
            exit 1
        fi
        sleep $SLEEP_INTERVAL
        for i in `seq 0 10`; do
            get_serv_pid
            if [ $pid -gt 0 ]; then
                sleep $SLEEP_INTERVAL
            fi
        done
        if [ $pid -gt 0 ]; then
            echo "ERROR: Failed to stop $SERVNAME"
            exit 1
        fi
	rm -f $LOCKFILE
    else
        echo "$SERVNAME already stopped."
    fi

    # stop supervise
    get_supervise_pid
    if [ $pid -gt 0 ]; then
        kill -9 $pid
        sleep $SLEEP_INTERVAL
        kill -0 $pid >/dev/null 2>&1
        if [ $? -eq 0 ]; then
            echo "ERROR: Failed to stop a supervise process: $pid"
            exit 1
        fi
    fi
}

status() {
    get_supervise_pid
    if [ $pid -lt 0 ]; then
      echo "$SERVNAME already stopped."
      exit 3
    fi

    get_serv_pid
    if [ $pid -gt 0 ]; then
        echo "$SERVNAME is running: pid=$pid";
        exit 0
    else
        echo "$SERVNAME already stopped."
        exit 3
    fi
}

case "$1" in
    start)
        start
        ;;
    stop)
        stop
        ;;
    restart)
        stop
        start
        ;;
    status)
        status
        ;;
    *)
echo "Usage: `basename $0` {start|stop|restart|status}"
        exit 1
esac
